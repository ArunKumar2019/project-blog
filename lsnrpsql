CREATE TABLE "VZW_REPORTING"."CTX_CST_MONITOR_INBOUND"
 (jobname VARCHAR2(250),
jobexecutionid number(19),
jobinstanceid number(19),
filepattern VARCHAR(500),
filename varchar(500),
  request CLOB,
  filestatus VARCHAR2(50) CHECK (status IN ('FOUND','UNKNOWN','NOTFOUND')),
  CREATION_TIMESTAMP TIMESTAMP (6),
  CREATION_DATE DATE DEFAULT SYSDATE, 
   MODIFY_TIMESTAMP TIMESTAMP (6),
  createdby VARCHAR2(100),
  updatedby VARCHAR2(100)
)
TABLESPACE VZW_REPORTING_DATA;

CREATE INDEX INDEX_CTX_CST_MONITOR_INBOUND ON "VZW_REPORTING"."CTX_CST_MONITOR_INBOUND"  ("JOBNAME","CREATION_DATE");

ALTER TABLE "VZW_REPORTING"."CTX_CST_MONITOR_INBOUND" MODIFY PARTITION BY RANGE (CREATION_DATE) INTERVAL (NUMTODSINTERVAL(7, 'DAY')) ( 
partition p0 VALUES LESS THAN (TO_DATE('2023-01-01', 'YYYY-MM-DD'))
);

CREATE OR REPLACE SYNONYM VZW_REPORTING_APP.CTX_CST_MONITOR_INBOUND FOR VZW_REPORTING.CTX_CST_MONITOR_INBOUND;
GRANT DELETE, INSERT, SELECT, UPDATE ON VZW_REPORTING.CTX_CST_MONITOR_INBOUND TO VZW_REPORTING_APP;

DROP TABLE  VZW_REPORTING.CTX_CST_MONITOR_INBOUND;
DROP INDEX INDEX_CTX_CST_MONITOR_INBOUND







If you need DROP TABLE and DROP INDEX for rollback purposes, it's best to include them at the beginning of the script to ensure a clean slate before recreating the table and index. Here's the corrected version with rollback handling:


---

Final Script with Rollback Included:

-- Rollback: Drop the table and index if they already exist
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE VZW_REPORTING.CTX_CST_MONITOR_INBOUND PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN -- ORA-00942: Table or view does not exist
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP INDEX INDEX_CTX_CST_MONITOR_INBOUND';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -1418 THEN -- ORA-01418: Specified index does not exist
            RAISE;
        END IF;
END;
/

-- Create Table with Partitioning
CREATE TABLE "VZW_REPORTING"."CTX_CST_MONITOR_INBOUND"
(
    jobname VARCHAR2(250),
    jobexecutionid NUMBER(19),
    jobinstanceid NUMBER(19),
    filepattern VARCHAR2(500),
    filename VARCHAR2(500),
    request CLOB,
    filestatus VARCHAR2(50) CHECK (filestatus IN ('FOUND','UNKNOWN','NOTFOUND')), -- Fixed column name
    CREATION_TIMESTAMP TIMESTAMP (6),
    CREATION_DATE DATE DEFAULT SYSDATE NOT NULL, -- Added NOT NULL for partitioning
    MODIFY_TIMESTAMP TIMESTAMP (6),
    createdby VARCHAR2(100),
    updatedby VARCHAR2(100)
)
PARTITION BY RANGE (CREATION_DATE) 
INTERVAL (NUMTODSINTERVAL(7, 'DAY')) 
(
    PARTITION p0 VALUES LESS THAN (TO_DATE('2023-01-01', 'YYYY-MM-DD'))
)
TABLESPACE VZW_REPORTING_DATA;

-- Creating Index
CREATE INDEX INDEX_CTX_CST_MONITOR_INBOUND 
ON "VZW_REPORTING"."CTX_CST_MONITOR_INBOUND" ("JOBNAME", "CREATION_DATE");

-- Creating Synonym
CREATE OR REPLACE SYNONYM VZW_REPORTING_APP.CTX_CST_MONITOR_INBOUND 
FOR VZW_REPORTING.CTX_CST_MONITOR_INBOUND;

-- Granting Permissions
GRANT DELETE, INSERT, SELECT, UPDATE 
ON VZW_REPORTING.CTX_CST_MONITOR_INBOUND 
TO VZW_REPORTING_APP;


---

What’s Improved?

✅ Safe Drop Handling

The BEGIN...EXCEPTION blocks handle DROP TABLE and DROP INDEX safely, avoiding errors if they don’t exist.

Ensures rollback happens without breaking the script.


✅ Partitioning Defined at Table Creation

No need for an ALTER TABLE statement later.


✅ Maintains Rollback Without Breaking Execution

Your table/index will be dropped before creation, avoiding conflicts.


Now, you can run this script repeatedly without errors, ensuring rollback is handled properly. Let me know if you need further refinements!

