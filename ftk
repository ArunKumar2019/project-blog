Here‚Äôs a distilled, end-to-end breakdown of what‚Äôs happening in that sequence diagram:

1. OMS ‚Üí BPMI
The Order Management System (OMS) invokes the BPMI engine to kick off the ‚ÄúAdd Line‚Äù process.


2. BPMI ‚Üí ConsumerAddLine (JBPM)
BPMI starts the ConsumerAddLine workflow in jBPM, passing along the MLMO payload.


3. ConsumerAddLine ‚Üí MS-Provisioning
The ConsumerAddLine process calls your provisioning microservice (MS-Provisioning), again with the MLMO payload.


4. MS-Provisioning ‚Üí RMQ/WMQ
MS-Provisioning builds the provisioning XML and pushes it onto the message queue (RabbitMQ/WMQ).


5. RMQ/WMQ ‚Üí MTAS
The MTAS component consumes the provisioning XML from the queue and begins processing it.


6. MTAS ‚Üí ETNI API
MTAS calls the ETNI external API to confirm the MDN (mobile number) activation‚Äîand marks it successful.


7. MTAS ‚Üí ROS
MTAS then calls the ROS service to update‚Äîor insert‚Äîrecords in the customer profile tables.


8. ROS ‚Üí Vision DB
As part of its work, ROS writes a new row into the LN_ADDL_DVC_INFO table in Vision DB (just like the BAU path).


9. ROS ‚Üí Cassandra DB
ROS also inserts device-or-product info into your Cassandra data store, mirroring the standard profile updates.


10. MS-Provisioning ‚Üí RMQ/WMQ (Vendor)
MS-Provisioning generates a second XML‚Äîthis time for your vendor provisioning‚Äîand pushes it back onto the same queue.


11. RMQ/WMQ ‚Üí MS-Vendor-Provisioning
Your Vendor-Provisioning service picks up that XML and processes it (e.g. sending commands to the network vendor).


12. MS-Vendor-Provisioning ‚Üí CJCM API
Finally, once the vendor steps complete, MS-Vendor-Provisioning calls the CJCM API to log the MDN-activation milestone as successful.




---

In a nutshell:

1. OMS triggers BPMI


2. BPMI ‚Üí jBPM ‚ÄúAdd Line‚Äù


3. jBPM ‚Üí Provisioning MS


4. Provisioning MS ‚Üí Queue (XML)


5. Queue ‚Üí MTAS ‚Üí ETNI (MDN activation)


6. MTAS ‚Üí ROS ‚Üí Vision DB & Cassandra


7. Provisioning MS ‚Üí Queue (vendor XML)


8. Queue ‚Üí Vendor MS ‚Üí CJCM (milestone update)



dis----------------

Certainly! Here's a step-by-step summary of the Disconnect Line flow based on the sequence diagram:


---

üîÅ High-Level Flow: Disconnect Line (MLMO Payload)


---

1. OMS ‚Üí BPMI

OMS initiates the disconnect process by calling BPMI.



---

2. BPMI ‚Üí ConsumerAddLine (jBPM)

BPMI invokes the ConsumerAddLine jBPM workflow with the MLMO payload for disconnect.



---

3. ConsumerAddLine ‚Üí Ms-Provisioning

jBPM (BPM layer) sends the MLMO payload to the provisioning microservice (Ms-Provisioning) to begin disconnect.



---

4. Ms-Provisioning ‚Üí RMQ & WMQ

Ms-Provisioning creates the Disconnect provisioning XML payload and pushes it to the message queue (RabbitMQ/WMQ).



---

5. RMQ & WMQ ‚Üí MTAS

MTAS picks up the provisioning XML from the queue and begins processing.



---

6. MTAS ‚Üí ETNI API

MTAS calls the ETNI API to update the deactivation of the MDN (mobile number) and marks it successful.



---

7. MTAS ‚Üí ROS

MTAS informs ROS to update the customer profile tables with disconnect details.



---

8. ROS ‚Üí Vision DB

ROS updates the record in LN_ADDL_DVC_INFO in Vision DB, similar to BAU (Business-As-Usual) updates.



---

9. ROS ‚Üí Cassandra DB

ROS updates Cassandra DB by inserting a row into mcs_or_prod.ln_addl_dvc_info, again in addition to standard profile updates.



---

10. Ms-Provisioning ‚Üí RMQ & WMQ (Vendor Disconnect)

Ms-Provisioning creates a vendor disconnect provisioning XML and pushes it to RMQ/WMQ.



---

11. RMQ & WMQ ‚Üí Ms-Vendor-Provisioning

The vendor provisioning microservice picks up and processes the vendor disconnect XML.



---

12. Ms-Vendor-Provisioning ‚Üí CJCM API

Finally, a call is made to the CJCM API to log the successful MDN deactivation milestone, similar to standard processing.



---

‚úÖ Summary:

The disconnect flow closely mirrors the add line flow, with the key difference being the deactivation of the MDN and updating of the same profile/device tables and APIs to reflect that disconnect. The system ensures all systems (Vision DB, Cassandra, ETNI, CJCM) are in sync about the disconnect event.

Let me know if you want a visual comparison between Add Line vs Disconnect Line flows!

--------------------------------------------------------------------------------


Disconnect Major Prod Issues so far we faced : 
	1.In MTAS Request rate center tags are missing - after fix working fine ( without rate center values from OR it will be LC but from MTAS its causing and issue such as the Rate Center, wasn't successfully passed from MTAS to SPC/HSS. This resulted in the application being unable to recognize the disconnect.
	No transaction is sent to the HSS because the Rate Center tells MTAS which HSS to provision to. With an invalid RateCenter, MTAS has no way to route to the HSS. If the RateCenter is sent correctly then the HSS will be provisioned.
	(for this MTAS failed orders Atul request to reflow from MTAS( which we discussed with Reece yesterday)
	Jira Ticket : CXTDT-744005,CXTDT-744011
	
	2.MTAS Group Info tags are missing becuase of kjar issues and BPM instances unstable we facing this kind of issue in both prod and non-prod after sometime reflow all orders are sucess and correct MTAS requestgetting populate
	Jira ticket for this issue -  CXTDT-749031 PROD : Provisioning Failed for fresh account trying for first time - failed with line in error before switch
	

Non-prod issues	
	 1.CUSTOMER / MDN CURRENT DEVICE NOT FOUND
		initially we faced this validation error because of our lnaddldvcinfo data has phoneTypCd is by default 'V' which inserted while provisioning after discussion the default "V" is changed to empty space.
	 2.Disconnects was failed due to absense of required indicators deviceId,deviceIdTyp 
		Short desc: During family talk Disconnect we are unable to get the deviceId and deviceIdType from the mentioned tables customerDvcProvInfo, custDvcEqpTransByD14Info, custDvcEqpTransByMtnInfo as for family talk activation as per the requirement we should insert data only in lnAddlDvcInfo. Now to handle this,

		Fix we made: In COS we are inserting ordLnItem table with deviceId as VRD and deviceIdType as FMTLK which are family talk indicators
		MR is raised - https://gitlab.verizon.com/B6VV_DVSV/cancel-order-service/-/merge_requests/29154
	
	3.Duplicate insertion happend in cassandra because vision data pop it throws (ROW NOT IN TABLE: LN_ADDL_DVC_INFO)
		short desc for activation we are sending swActvTmstamp and lnDvcProvTs which is not matching causing vision CPF feed causing duplicated in Cassandra
		because we are sending (lnAddlDvcInfoModel.swActvTmstamp = commonProperties?.fulfillTmstamp lnAddlDvcInfoModel.lnDvcProvTs = localObject?.currentTmstamp)
		it makes minor differnce in tmstamp which also correct but in vision the data populate logic is mistakenly takes same value(swActvTmstamp) for swActvTmstamp and lnDvcProvTs when it tries update from vision cassandra the data its considerd and it inserts new row instead of update same MDN in lnaddldvcinfo
		
		fix we made we are sending same currentTmstampto both columns
		https://gitlab.verizon.com/B6VV_DVSV/record_order_service/-/merge_requests/16466/diffs
		similiar kind of issue we faced in disconnect also 
		https://gitlab.verizon.com/B6VV_DVSV/record_order_service/-/merge_requests/16476
	


	Here is your content with only grammatical corrections applied:


---

Disconnect Major Prod Issues So Far We Faced:

1. In MTAS, Request Rate Center Tags Were Missing
After the fix, it is working fine. Without rate center values from OR, it defaults to LC. However, from MTAS, it caused an issue such as the Rate Center not being successfully passed from MTAS to SPC/HSS. This resulted in the application being unable to recognize the disconnect.
No transaction is sent to the HSS because the Rate Center tells MTAS which HSS to provision to. With an invalid Rate Center, MTAS has no way to route to the HSS. If the Rate Center is sent correctly, then the HSS will be provisioned.
(For this, MTAS failed orders. Atul requested to reflow from MTAS, which we discussed with Reece yesterday.)
Jira Tickets: CXTDT-744005, CXTDT-744011


2. MTAS Group Info Tags Were Missing
Due to KJAR issues and unstable BPM instances, we faced this issue in both prod and non-prod. After some time, reflowing all orders was successful and correct MTAS requests were populated.
Jira Ticket: CXTDT-749031
PROD: Provisioning failed for a fresh account trying for the first time ‚Äì failed with line in error before switch.




---

Non-Prod Issues

1. CUSTOMER / MDN CURRENT DEVICE NOT FOUND
Initially, we faced this validation error because our lnAddlDvcInfo data had phoneTypCd as default 'V', which was inserted during provisioning. After discussion, the default "V" was changed to an empty space.


2. Disconnects Failed Due to Absence of Required Indicators: deviceId, deviceIdTyp
Short Description: During family talk disconnects, we were unable to get the deviceId and deviceIdType from the mentioned tables: customerDvcProvInfo, custDvcEqpTransByD14Info, custDvcEqpTransByMtnInfo. For family talk activation, as per the requirement, we should insert data only into lnAddlDvcInfo.
Fix Made: In COS, we are inserting into the ordLnItem table with deviceId as VRD and deviceIdType as FMTLK, which are family talk indicators.
MR Raised: https://gitlab.verizon.com/B6VV_DVSV/cancel-order-service/-/merge_requests/29154


3. Duplicate Insertion Happened in Cassandra Due to Vision Data Pop ‚Äì Error: ROW NOT IN TABLE: LN_ADDL_DVC_INFO
Short Description:
For activation, we were sending swActvTmstamp and lnDvcProvTs which were not matching, causing Vision CPF feed to result in duplication in Cassandra.
This happened because we were sending:

lnAddlDvcInfoModel.swActvTmstamp = commonProperties?.fulfillTmstamp

lnAddlDvcInfoModel.lnDvcProvTs = localObject?.currentTmstamp
The minor difference in timestamps (though technically correct) caused Vision's data populate logic to mistakenly treat them as separate rows. As a result, it inserted a new row instead of updating the existing MDN in lnAddlDvcInfo.
Fix Made: We are now sending the same currentTmstamp to both columns.

https://gitlab.verizon.com/B6VV_DVSV/record_order_service/-/merge_requests/16466/diffs
A similar issue was faced during disconnect as well:

https://gitlab.verizon.com/B6VV_DVSV/record_order_service/-/merge_requests/16476





---

Let me know if you want this restructured into a presentation-friendly format or one-pager summary.



