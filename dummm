 private Acst534pModel reformatModel(Acst534pModel inputModel) {
        Acst534pModel outputModel = new Acst534pModel();
        outputModel.setMtn4g(reformatToSize(getValue(inputModel.getMtn4g()), 10, " ", false));
        outputModel.setLnOfSvcIdNoP1Bkp4g(reformatToSize(getValue(inputModel.getLnOfSvcIdNoP1Bkp4g()+ "0"), 8, " ", true));
        outputModel.setLnOfSvcIdNoP2Bkp4g(reformatToSize(getValue(inputModel.getLnOfSvcIdNoP2Bkp4g()), 18, " ", false));
        outputModel.setConcateP1P24g(outputModel.getLnOfSvcIdNoP1Bkp4g() + outputModel.getLnOfSvcIdNoP2Bkp4g());
        outputModel.setDeviceIdTrans4g(reformatToSize(getValue(inputModel.getDeviceIdTrans4g()), 20, " ", true));
        outputModel.setDeviceIdInfo4g(reformatToSize(getValue(inputModel.getDeviceIdInfo4g()), 20, " ", false));
        outputModel.setMtn5g(reformatToSize(getValue(inputModel.getMtn5g()), 10, " ", false));
        outputModel.setLnOfSvcIdNoP15g(reformatToSize(getValue(inputModel.getLnOfSvcIdNoP15g()+ "0"), 8, " ", true));
        outputModel.setLnOfSvcIdNoP25g(reformatToSize(getValue(inputModel.getLnOfSvcIdNoP25g()), 18, " ", false));
        outputModel.setConcateP1P25g(outputModel.getLnOfSvcIdNoP15g() + outputModel.getLnOfSvcIdNoP25g());
        outputModel.setDeviceIdTrans5g(reformatToSize(getValue(inputModel.getDeviceIdTrans5g()), 20, " ", true));
        outputModel.setDeviceIdInfo5g(reformatToSize(getValue(inputModel.getDeviceIdInfo5g()), 20, " ", false));
        outputModel.setDeviceType(reformatToSize(getValue(inputModel.getDeviceType()), 3, " ", false));

        return outputModel;

    }

    private String getValue(String input) {
        return null != input ? input : "";
    }

    public String reformatToSize(String str, int size, String charToReplace, boolean isRight) {
        if (str == null) {
            str = "";
        }
        if (isRight) {
            str = StringUtils.rightPad(str, size, charToReplace);
        } else {
            str = StringUtils.leftPad(str, size, charToReplace);
        }
        return str;
    }



refined


private Acst534pModel reformatModel(Acst534pModel inputModel) {
    Acst534pModel outputModel = new Acst534pModel();

    // 4G Fields
    outputModel.setMtn4g(formatField(inputModel.getMtn4g(), 10, false));

    String p14g = getValue(inputModel.getLnOfSvcIdNoP1Bkp4g());
    String p24g = getValue(inputModel.getLnOfSvcIdNoP2Bkp4g());
    outputModel.setLnOfSvcIdNoP1Bkp4g(formatField(getFormattedP1(p14g, p24g), 8, true));
    outputModel.setLnOfSvcIdNoP2Bkp4g(formatField(p24g, 18, false));
    outputModel.setConcateP1P24g(outputModel.getLnOfSvcIdNoP1Bkp4g() + outputModel.getLnOfSvcIdNoP2Bkp4g());

    outputModel.setDeviceIdTrans4g(formatField(inputModel.getDeviceIdTrans4g(), 20, true));
    outputModel.setDeviceIdInfo4g(formatField(inputModel.getDeviceIdInfo4g(), 20, false));

    // 5G Fields
    outputModel.setMtn5g(formatField(inputModel.getMtn5g(), 10, false));

    String p15g = getValue(inputModel.getLnOfSvcIdNoP15g());
    String p25g = getValue(inputModel.getLnOfSvcIdNoP25g());
    outputModel.setLnOfSvcIdNoP15g(formatField(getFormattedP1(p15g, p25g), 8, true));
    outputModel.setLnOfSvcIdNoP25g(formatField(p25g, 18, false));
    outputModel.setConcateP1P25g(outputModel.getLnOfSvcIdNoP15g() + outputModel.getLnOfSvcIdNoP25g());

    outputModel.setDeviceIdTrans5g(formatField(inputModel.getDeviceIdTrans5g(), 20, true));
    outputModel.setDeviceIdInfo5g(formatField(inputModel.getDeviceIdInfo5g(), 20, false));

    // Device Type
    outputModel.setDeviceType(formatField(inputModel.getDeviceType(), 3, false));

    return outputModel;
}

// Helper method to apply conditional '0' addition logic
private String getFormattedP1(String p1, String p2) {
    if (!p1.isBlank() && !p2.isBlank() && !p1.equals("0") && !p2.equals("0")) {
        return p1 + "0";
    }
    return p1;
}

// Helper methods
private String formatField(String value, int size, boolean isRightPad) {
    return reformatToSize(getValue(value), size, " ", isRightPad);
}

private String getValue(String input) {
    return (input != null) ? input.trim() : "";
}

public String reformatToSize(String str, int size, String charToReplace, boolean isRight) {
    return (isRight) ? StringUtils.rightPad(str, size, charToReplace) : StringUtils.leftPad(str, size, charToReplace);
}


private String getFormattedP1(String p1, String p2) {
    if (!p1.isBlank() && !p2.isBlank() && !p1.equals("0") && !p2.equals("0")) {
        return p1 + "0";  // Add "0" only if both have values
    }
    return p1.equals("0") ? "" : p1; // Replace "0" with empty for space padding
}



__________________________

private Acst534pModel reformatModel(Acst534pModel inputModel) {
    Acst534pModel outputModel = new Acst534pModel();

    // 4G Fields
    outputModel.setMtn4g(reformatToSize(inputModel.getMtn4g(), 10, " ", false));
    outputModel.setLnOfSvcIdNoP1Bkp4g(reformatP1P2(inputModel.getLnOfSvcIdNoP1Bkp4g(), inputModel.getLnOfSvcIdNoP2Bkp4g(), 8, true));
    outputModel.setLnOfSvcIdNoP2Bkp4g(reformatP1P2(inputModel.getLnOfSvcIdNoP1Bkp4g(), inputModel.getLnOfSvcIdNoP2Bkp4g(), 18, false));
    outputModel.setConcateP1P24g(outputModel.getLnOfSvcIdNoP1Bkp4g() + outputModel.getLnOfSvcIdNoP2Bkp4g());

    outputModel.setDeviceIdTrans4g(reformatToSize(inputModel.getDeviceIdTrans4g(), 20, " ", true));
    outputModel.setDeviceIdInfo4g(reformatToSize(inputModel.getDeviceIdInfo4g(), 20, " ", false));

    // 5G Fields
    outputModel.setMtn5g(reformatToSize(inputModel.getMtn5g(), 10, " ", false));
    outputModel.setLnOfSvcIdNoP15g(reformatP1P2(inputModel.getLnOfSvcIdNoP15g(), inputModel.getLnOfSvcIdNoP25g(), 8, true));
    outputModel.setLnOfSvcIdNoP25g(reformatP1P2(inputModel.getLnOfSvcIdNoP15g(), inputModel.getLnOfSvcIdNoP25g(), 18, false));
    outputModel.setConcateP1P25g(outputModel.getLnOfSvcIdNoP15g() + outputModel.getLnOfSvcIdNoP25g());

    outputModel.setDeviceIdTrans5g(reformatToSize(inputModel.getDeviceIdTrans5g(), 20, " ", true));
    outputModel.setDeviceIdInfo5g(reformatToSize(inputModel.getDeviceIdInfo5g(), 20, " ", false));

    // Device Type
    outputModel.setDeviceType(reformatToSize(inputModel.getDeviceType(), 3, " ", false));

    return outputModel;
}

// **Single optimized method to handle P1 & P2 formatting**
private String reformatP1P2(String p1, String p2, int size, boolean isRightPad) {
    p1 = getValue(p1);
    p2 = getValue(p2);

    if (p1.equals("0") && p2.equals("0")) {
        return " ".repeat(size); // If both are "0", replace with spaces
    }
    if (!p1.isBlank() && !p2.isBlank() && !p1.equals("0") && !p2.equals("0")) {
        p1 += "0"; // Add "0" if both have values
    }
    return reformatToSize(p1.equals("0") ? "" : p1, size, " ", isRightPad);
}

// **Helper methods**
private String getValue(String input) {
    return (input != null) ? input.trim() : "";
}

public String reformatToSize(String str, int size, String charToReplace, boolean isRight) {
    return isRight ? StringUtils.rightPad(str, size, charToReplace) : StringUtils.leftPad(str, size, charToReplace);
}

______


private String getFormattedP1(String p1, String p2, int size) {
    if (p1.equals("0") && p2.equals("0")) {
        return " ".repeat(size); // Replace with spaces if both are "0"
    } else if (!p1.isBlank() && !p2.isBlank() && !p1.equals("0") && !p2.equals("0")) {
        return p1 + "0"; // Add "0" only if both have values
    }
    return p1.equals("0") ? "" : p1; // Replace "0" with empty for padding
}

private String getFormattedP2(String p1, String p2, int size) {
    if (p1.equals("0") && p2.equals("0")) {
        return " ".repeat(size); // Replace with spaces if both are "0"
    }
    return p2.equals("0") ? "" : p2; // Replace "0" with empty for padding
}